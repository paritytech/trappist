
//! Autogenerated weights for `pallet_scheduler`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner-sgmchhtv-project-647-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/trappist-collator
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --pallet=pallet_scheduler
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./runtime/trappist/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_scheduler`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
	// Storage: Scheduler IncompleteSince (r:1 w:1)
	fn service_agendas_base() -> Weight {
		// Minimum execution time: 4_212 nanoseconds.
		Weight::from_ref_time(4_413_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 512]`.
	fn service_agenda_base(s: u32, ) -> Weight {
		// Minimum execution time: 3_899 nanoseconds.
		Weight::from_ref_time(895_796)
			// Standard Error: 2_129
			.saturating_add(Weight::from_ref_time(719_773).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn service_task_base() -> Weight {
		// Minimum execution time: 11_762 nanoseconds.
		Weight::from_ref_time(12_296_000)
	}
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	/// The range of component `s` is `[128, 4194304]`.
	fn service_task_fetched(s: u32, ) -> Weight {
		// Minimum execution time: 23_942 nanoseconds.
		Weight::from_ref_time(24_189_000)
			// Standard Error: 7
			.saturating_add(Weight::from_ref_time(1_476).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:0 w:1)
	fn service_task_named() -> Weight {
		// Minimum execution time: 12_731 nanoseconds.
		Weight::from_ref_time(13_580_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn service_task_periodic() -> Weight {
		// Minimum execution time: 11_934 nanoseconds.
		Weight::from_ref_time(12_257_000)
	}
	// Storage: LockdownMode LockdownModeStatus (r:1 w:0)
	fn execute_dispatch_signed() -> Weight {
		// Minimum execution time: 7_532 nanoseconds.
		Weight::from_ref_time(7_707_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn execute_dispatch_unsigned() -> Weight {
		// Minimum execution time: 4_480 nanoseconds.
		Weight::from_ref_time(4_618_000)
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 511]`.
	fn schedule(s: u32, ) -> Weight {
		// Minimum execution time: 19_722 nanoseconds.
		Weight::from_ref_time(18_979_135)
			// Standard Error: 2_178
			.saturating_add(Weight::from_ref_time(747_788).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Storage: Scheduler Lookup (r:0 w:1)
	/// The range of component `s` is `[1, 512]`.
	fn cancel(s: u32, ) -> Weight {
		// Minimum execution time: 22_940 nanoseconds.
		Weight::from_ref_time(19_986_543)
			// Standard Error: 2_497
			.saturating_add(Weight::from_ref_time(1_180_671).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 511]`.
	fn schedule_named(s: u32, ) -> Weight {
		// Minimum execution time: 22_190 nanoseconds.
		Weight::from_ref_time(24_867_350)
			// Standard Error: 2_382
			.saturating_add(Weight::from_ref_time(748_452).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[1, 512]`.
	fn cancel_named(s: u32, ) -> Weight {
		// Minimum execution time: 24_428 nanoseconds.
		Weight::from_ref_time(21_647_908)
			// Standard Error: 2_447
			.saturating_add(Weight::from_ref_time(1_192_759).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
