
//! Autogenerated weights for `pallet_dex`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner-sgmchhtv-project-647-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/trappist-collator
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --pallet=pallet_dex
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./runtime/trappist/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_dex`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_dex::WeightInfo for WeightInfo<T> {
	// Storage: Assets Asset (r:2 w:2)
	// Storage: Dex Exchanges (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Assets Account (r:3 w:3)
	fn create_exchange() -> Weight {
		// Minimum execution time: 98_184 nanoseconds.
		Weight::from_ref_time(100_833_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Assets Asset (r:2 w:2)
	// Storage: Assets Account (r:3 w:3)
	// Storage: Dex Exchanges (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn add_liquidity() -> Weight {
		// Minimum execution time: 89_657 nanoseconds.
		Weight::from_ref_time(91_694_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Dex Exchanges (r:1 w:1)
	// Storage: Assets Asset (r:2 w:2)
	// Storage: Assets Account (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	fn remove_liquidity() -> Weight {
		// Minimum execution time: 96_107 nanoseconds.
		Weight::from_ref_time(98_069_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Dex Exchanges (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	fn currency_to_asset() -> Weight {
		// Minimum execution time: 72_392 nanoseconds.
		Weight::from_ref_time(74_630_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Dex Exchanges (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn asset_to_currency() -> Weight {
		// Minimum execution time: 73_307 nanoseconds.
		Weight::from_ref_time(74_521_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Dex Exchanges (r:2 w:2)
	// Storage: Assets Asset (r:2 w:2)
	// Storage: Assets Account (r:4 w:4)
	fn asset_to_asset() -> Weight {
		// Minimum execution time: 92_060 nanoseconds.
		Weight::from_ref_time(96_215_000)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(8))
	}
}
