
//! Autogenerated weights for `pallet_utility`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner-sgmchhtv-project-647-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/trappist-collator
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --pallet=pallet_utility
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./runtime/trappist/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_utility`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
	// Storage: LockdownMode LockdownModeStatus (r:1 w:0)
	/// The range of component `c` is `[0, 1000]`.
	fn batch(c: u32, ) -> Weight {
		// Minimum execution time: 14_308 nanoseconds.
		Weight::from_ref_time(10_921_747)
			// Standard Error: 2_401
			.saturating_add(Weight::from_ref_time(5_205_088).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: LockdownMode LockdownModeStatus (r:1 w:0)
	fn as_derivative() -> Weight {
		// Minimum execution time: 9_533 nanoseconds.
		Weight::from_ref_time(9_840_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: LockdownMode LockdownModeStatus (r:1 w:0)
	/// The range of component `c` is `[0, 1000]`.
	fn batch_all(c: u32, ) -> Weight {
		// Minimum execution time: 14_447 nanoseconds.
		Weight::from_ref_time(18_112_479)
			// Standard Error: 2_391
			.saturating_add(Weight::from_ref_time(5_403_073).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn dispatch_as() -> Weight {
		// Minimum execution time: 16_401 nanoseconds.
		Weight::from_ref_time(17_360_000)
	}
	// Storage: LockdownMode LockdownModeStatus (r:1 w:0)
	/// The range of component `c` is `[0, 1000]`.
	fn force_batch(c: u32, ) -> Weight {
		// Minimum execution time: 14_320 nanoseconds.
		Weight::from_ref_time(14_721_835)
			// Standard Error: 2_612
			.saturating_add(Weight::from_ref_time(5_188_831).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
