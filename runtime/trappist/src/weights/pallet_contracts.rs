// This file is part of Trappist.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_contracts`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner-fqdpju5x-project-647-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("trappist-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/trappist-node
// benchmark
// pallet
// --chain=trappist-dev
// --steps=50
// --repeat=20
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --header=./templates/file_header.txt
// --output=./runtime/trappist/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_contracts`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_contracts::WeightInfo for WeightInfo<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 2_978 nanoseconds.
		Weight::from_ref_time(3_130_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 13_149 nanoseconds.
		Weight::from_ref_time(13_712_000)
			// Standard Error: 1_251
			.saturating_add(Weight::from_ref_time(1_205_543).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 1024]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 2_880 nanoseconds.
		Weight::from_ref_time(24_570_263)
			// Standard Error: 4_559
			.saturating_add(Weight::from_ref_time(1_426_071).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 28_248 nanoseconds.
		Weight::from_ref_time(5_287_438)
			// Standard Error: 72
			.saturating_add(Weight::from_ref_time(59_356).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 340_490 nanoseconds.
		Weight::from_ref_time(389_532_856)
			// Standard Error: 42
			.saturating_add(Weight::from_ref_time(34_415).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, i: u32, s: u32, ) -> Weight {
		// Minimum execution time: 5_486_860 nanoseconds.
		Weight::from_ref_time(340_046_922)
			// Standard Error: 259
			.saturating_add(Weight::from_ref_time(108_783).saturating_mul(c.into()))
			// Standard Error: 15
			.saturating_add(Weight::from_ref_time(2_550).saturating_mul(i.into()))
			// Standard Error: 15
			.saturating_add(Weight::from_ref_time(2_634).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(i: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_399_188 nanoseconds.
		Weight::from_ref_time(332_077_520)
			// Standard Error: 26
			.saturating_add(Weight::from_ref_time(1_983).saturating_mul(i.into()))
			// Standard Error: 26
			.saturating_add(Weight::from_ref_time(2_562).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 156_265 nanoseconds.
		Weight::from_ref_time(162_403_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 359_033 nanoseconds.
		Weight::from_ref_time(372_771_698)
			// Standard Error: 151
			.saturating_add(Weight::from_ref_time(105_532).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 38_148 nanoseconds.
		Weight::from_ref_time(39_846_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 40_049 nanoseconds.
		Weight::from_ref_time(41_721_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 329_298 nanoseconds.
		Weight::from_ref_time(357_697_852)
			// Standard Error: 49_135
			.saturating_add(Weight::from_ref_time(19_203_667).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 331_792 nanoseconds.
		Weight::from_ref_time(241_304_981)
			// Standard Error: 1_083_625
			.saturating_add(Weight::from_ref_time(256_742_750).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 317_420 nanoseconds.
		Weight::from_ref_time(203_239_313)
			// Standard Error: 1_028_148
			.saturating_add(Weight::from_ref_time(322_050_270).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 332_246 nanoseconds.
		Weight::from_ref_time(358_059_690)
			// Standard Error: 33_797
			.saturating_add(Weight::from_ref_time(23_108_825).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 330_631 nanoseconds.
		Weight::from_ref_time(354_224_159)
			// Standard Error: 32_992
			.saturating_add(Weight::from_ref_time(12_551_140).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 334_304 nanoseconds.
		Weight::from_ref_time(357_928_990)
			// Standard Error: 46_568
			.saturating_add(Weight::from_ref_time(18_920_006).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 324_385 nanoseconds.
		Weight::from_ref_time(357_693_760)
			// Standard Error: 43_214
			.saturating_add(Weight::from_ref_time(18_957_773).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 332_781 nanoseconds.
		Weight::from_ref_time(357_539_380)
			// Standard Error: 167_060
			.saturating_add(Weight::from_ref_time(106_153_057).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 332_280 nanoseconds.
		Weight::from_ref_time(358_632_385)
			// Standard Error: 38_370
			.saturating_add(Weight::from_ref_time(18_289_213).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 326_803 nanoseconds.
		Weight::from_ref_time(357_491_331)
			// Standard Error: 36_556
			.saturating_add(Weight::from_ref_time(18_280_687).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 329_630 nanoseconds.
		Weight::from_ref_time(359_132_236)
			// Standard Error: 34_566
			.saturating_add(Weight::from_ref_time(18_393_348).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 321_604 nanoseconds.
		Weight::from_ref_time(355_656_482)
			// Standard Error: 34_968
			.saturating_add(Weight::from_ref_time(18_794_690).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 331_197 nanoseconds.
		Weight::from_ref_time(362_671_489)
			// Standard Error: 63_992
			.saturating_add(Weight::from_ref_time(94_707_184).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 142_401 nanoseconds.
		Weight::from_ref_time(151_555_632)
			// Standard Error: 25_782
			.saturating_add(Weight::from_ref_time(8_956_940).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 322_659 nanoseconds.
		Weight::from_ref_time(356_275_338)
			// Standard Error: 32_323
			.saturating_add(Weight::from_ref_time(16_035_518).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 355_222 nanoseconds.
		Weight::from_ref_time(424_183_249)
			// Standard Error: 5_615
			.saturating_add(Weight::from_ref_time(9_701_131).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 310_390 nanoseconds.
		Weight::from_ref_time(352_341_636)
			// Standard Error: 992_331
			.saturating_add(Weight::from_ref_time(3_796_363).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 336_017 nanoseconds.
		Weight::from_ref_time(355_151_981)
			// Standard Error: 928
			.saturating_add(Weight::from_ref_time(208_171).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 314_680 nanoseconds.
		Weight::from_ref_time(354_535_757)
			// Standard Error: 1_037_306
			.saturating_add(Weight::from_ref_time(60_105_542).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 330_481 nanoseconds.
		Weight::from_ref_time(357_097_576)
			// Standard Error: 100_173
			.saturating_add(Weight::from_ref_time(119_297_487).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 331_267 nanoseconds.
		Weight::from_ref_time(362_636_493)
			// Standard Error: 110_323
			.saturating_add(Weight::from_ref_time(267_268_001).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_417_507 nanoseconds.
		Weight::from_ref_time(532_215_896)
			// Standard Error: 960_759
			.saturating_add(Weight::from_ref_time(228_452_040).saturating_mul(t.into()))
			// Standard Error: 263_871
			.saturating_add(Weight::from_ref_time(81_600_695).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 157_990 nanoseconds.
		Weight::from_ref_time(169_962_901)
			// Standard Error: 30_011
			.saturating_add(Weight::from_ref_time(14_556_740).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 332_269 nanoseconds.
		Weight::from_ref_time(262_145_781)
			// Standard Error: 982_624
			.saturating_add(Weight::from_ref_time(505_755_383).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 492_284 nanoseconds.
		Weight::from_ref_time(680_360_450)
			// Standard Error: 1_592_291
			.saturating_add(Weight::from_ref_time(129_916_967).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(52))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(50))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 491_914 nanoseconds.
		Weight::from_ref_time(664_614_244)
			// Standard Error: 1_518_371
			.saturating_add(Weight::from_ref_time(99_276_670).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(49))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 332_786 nanoseconds.
		Weight::from_ref_time(270_097_085)
			// Standard Error: 1_190_317
			.saturating_add(Weight::from_ref_time(501_973_057).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 444_494 nanoseconds.
		Weight::from_ref_time(640_775_409)
			// Standard Error: 1_671_367
			.saturating_add(Weight::from_ref_time(104_394_259).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(48))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 333_796 nanoseconds.
		Weight::from_ref_time(309_206_192)
			// Standard Error: 751_078
			.saturating_add(Weight::from_ref_time(406_117_902).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 424_112 nanoseconds.
		Weight::from_ref_time(596_899_855)
			// Standard Error: 1_552_928
			.saturating_add(Weight::from_ref_time(200_977_207).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 314_565 nanoseconds.
		Weight::from_ref_time(287_659_697)
			// Standard Error: 857_987
			.saturating_add(Weight::from_ref_time(390_935_060).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 418_117 nanoseconds.
		Weight::from_ref_time(560_609_255)
			// Standard Error: 1_305_433
			.saturating_add(Weight::from_ref_time(96_540_642).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 333_813 nanoseconds.
		Weight::from_ref_time(258_942_561)
			// Standard Error: 1_336_896
			.saturating_add(Weight::from_ref_time(503_922_643).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 455_515 nanoseconds.
		Weight::from_ref_time(644_615_081)
			// Standard Error: 1_643_869
			.saturating_add(Weight::from_ref_time(206_244_938).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(48))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 334_766 nanoseconds.
		Weight::from_ref_time(221_817_652)
			// Standard Error: 923_744
			.saturating_add(Weight::from_ref_time(1_618_101_712).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 331_342 nanoseconds.
		Weight::from_ref_time(351_199_000)
			// Standard Error: 11_602_355
			.saturating_add(Weight::from_ref_time(26_228_960_944).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((160_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((160_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 318_062 nanoseconds.
		Weight::from_ref_time(351_198_000)
			// Standard Error: 12_963_497
			.saturating_add(Weight::from_ref_time(25_839_613_443).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((150_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((75_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_890_131 nanoseconds.
		Weight::from_ref_time(16_133_868_704)
			// Standard Error: 2_080_776
			.saturating_add(Weight::from_ref_time(14_359_688).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(167))
			.saturating_add(T::DbWeight::get().reads((81_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(163))
			.saturating_add(T::DbWeight::get().writes((81_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 334_258 nanoseconds.
		Weight::from_ref_time(351_008_000)
			// Standard Error: 36_607_063
			.saturating_add(Weight::from_ref_time(33_103_121_772).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((400_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((400_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `i` is `[0, 960]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_input_salt_kb(t: u32, i: u32, s: u32, ) -> Weight {
		// Minimum execution time: 222_138_908 nanoseconds.
		Weight::from_ref_time(226_071_864_000)
			// Standard Error: 1_710_833
			.saturating_add(Weight::from_ref_time(127_615_155).saturating_mul(i.into()))
			// Standard Error: 1_710_833
			.saturating_add(Weight::from_ref_time(127_547_836).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(249))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(247))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 329_280 nanoseconds.
		Weight::from_ref_time(355_175_048)
			// Standard Error: 1_174_394
			.saturating_add(Weight::from_ref_time(29_365_451).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 363_225 nanoseconds.
		Weight::from_ref_time(52_644_488)
			// Standard Error: 57_215
			.saturating_add(Weight::from_ref_time(108_898_283).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 321_748 nanoseconds.
		Weight::from_ref_time(354_958_993)
			// Standard Error: 1_118_034
			.saturating_add(Weight::from_ref_time(59_065_906).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 402_742 nanoseconds.
		Weight::from_ref_time(414_545_000)
			// Standard Error: 99_221
			.saturating_add(Weight::from_ref_time(293_648_385).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 328_747 nanoseconds.
		Weight::from_ref_time(353_823_475)
			// Standard Error: 1_059_276
			.saturating_add(Weight::from_ref_time(34_377_224).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 376_404 nanoseconds.
		Weight::from_ref_time(126_146_441)
			// Standard Error: 53_017
			.saturating_add(Weight::from_ref_time(144_756_477).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 312_949 nanoseconds.
		Weight::from_ref_time(352_594_600)
			// Standard Error: 1_012_738
			.saturating_add(Weight::from_ref_time(39_169_500).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 368_665 nanoseconds.
		Weight::from_ref_time(384_174_000)
			// Standard Error: 46_064
			.saturating_add(Weight::from_ref_time(144_822_913).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 317_727 nanoseconds.
		Weight::from_ref_time(357_217_930)
			// Standard Error: 1_165_773
			.saturating_add(Weight::from_ref_time(3_814_516_869).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 322_590 nanoseconds.
		Weight::from_ref_time(357_336_483)
			// Standard Error: 1_142_183
			.saturating_add(Weight::from_ref_time(1_022_335_116).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 335_552 nanoseconds.
		Weight::from_ref_time(353_377_000)
			// Standard Error: 6_223_641
			.saturating_add(Weight::from_ref_time(1_896_707_082).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((225_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((150_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 331_197 nanoseconds.
		Weight::from_ref_time(359_564_913)
			// Standard Error: 43_017
			.saturating_add(Weight::from_ref_time(12_278_559).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 331_625 nanoseconds.
		Weight::from_ref_time(484_135_777)
			// Standard Error: 356_612
			.saturating_add(Weight::from_ref_time(26_020_477).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiation_nonce(r: u32, ) -> Weight {
		// Minimum execution time: 345_262 nanoseconds.
		Weight::from_ref_time(360_733_226)
			// Standard Error: 38_672
			.saturating_add(Weight::from_ref_time(10_233_439).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 717 nanoseconds.
		Weight::from_ref_time(841_238)
			// Standard Error: 505
			.saturating_add(Weight::from_ref_time(711_443).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 1_086 nanoseconds.
		Weight::from_ref_time(1_134_000)
			// Standard Error: 6_043
			.saturating_add(Weight::from_ref_time(1_413_033).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 1_050 nanoseconds.
		Weight::from_ref_time(1_113_000)
			// Standard Error: 10_291
			.saturating_add(Weight::from_ref_time(1_423_504).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 724 nanoseconds.
		Weight::from_ref_time(689_086)
			// Standard Error: 1_930
			.saturating_add(Weight::from_ref_time(1_698_229).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 694 nanoseconds.
		Weight::from_ref_time(717_000)
			// Standard Error: 6_041
			.saturating_add(Weight::from_ref_time(1_698_481).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 723 nanoseconds.
		Weight::from_ref_time(742_000)
			// Standard Error: 2_321
			.saturating_add(Weight::from_ref_time(1_197_061).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 720 nanoseconds.
		Weight::from_ref_time(733_000)
			// Standard Error: 5_460
			.saturating_add(Weight::from_ref_time(1_570_530).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 739 nanoseconds.
		Weight::from_ref_time(760_000)
			// Standard Error: 8_240
			.saturating_add(Weight::from_ref_time(2_334_302).saturating_mul(r.into()))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 3_201 nanoseconds.
		Weight::from_ref_time(3_740_228)
			// Standard Error: 103
			.saturating_add(Weight::from_ref_time(2_148).saturating_mul(e.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 731 nanoseconds.
		Weight::from_ref_time(1_043_885)
			// Standard Error: 2_590
			.saturating_add(Weight::from_ref_time(2_444_821).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 901 nanoseconds.
		Weight::from_ref_time(1_365_533)
			// Standard Error: 4_619
			.saturating_add(Weight::from_ref_time(3_233_338).saturating_mul(r.into()))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_418 nanoseconds.
		Weight::from_ref_time(5_777_725)
			// Standard Error: 761
			.saturating_add(Weight::from_ref_time(237_361).saturating_mul(p.into()))
	}
	/// The range of component `l` is `[0, 1024]`.
	fn instr_call_per_local(l: u32, ) -> Weight {
		// Minimum execution time: 3_076 nanoseconds.
		Weight::from_ref_time(3_957_166)
			// Standard Error: 50
			.saturating_add(Weight::from_ref_time(72_935).saturating_mul(l.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 2_244 nanoseconds.
		Weight::from_ref_time(2_550_571)
			// Standard Error: 592
			.saturating_add(Weight::from_ref_time(863_132).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 2_341 nanoseconds.
		Weight::from_ref_time(2_532_055)
			// Standard Error: 871
			.saturating_add(Weight::from_ref_time(770_251).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 2_336 nanoseconds.
		Weight::from_ref_time(2_548_644)
			// Standard Error: 1_143
			.saturating_add(Weight::from_ref_time(981_512).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 791 nanoseconds.
		Weight::from_ref_time(1_075_535)
			// Standard Error: 667
			.saturating_add(Weight::from_ref_time(956_703).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 792 nanoseconds.
		Weight::from_ref_time(1_074_186)
			// Standard Error: 1_254
			.saturating_add(Weight::from_ref_time(977_041).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 1_080 nanoseconds.
		Weight::from_ref_time(1_516_401)
			// Standard Error: 830
			.saturating_add(Weight::from_ref_time(775_865).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 723 nanoseconds.
		Weight::from_ref_time(806_287)
			// Standard Error: 100_735
			.saturating_add(Weight::from_ref_time(208_316_312).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 733 nanoseconds.
		Weight::from_ref_time(889_807)
			// Standard Error: 589
			.saturating_add(Weight::from_ref_time(873_178).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 721 nanoseconds.
		Weight::from_ref_time(813_132)
			// Standard Error: 531
			.saturating_add(Weight::from_ref_time(874_833).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 697 nanoseconds.
		Weight::from_ref_time(827_966)
			// Standard Error: 703
			.saturating_add(Weight::from_ref_time(877_842).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 700 nanoseconds.
		Weight::from_ref_time(826_266)
			// Standard Error: 609
			.saturating_add(Weight::from_ref_time(881_437).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 713 nanoseconds.
		Weight::from_ref_time(810_799)
			// Standard Error: 719
			.saturating_add(Weight::from_ref_time(896_956).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 695 nanoseconds.
		Weight::from_ref_time(818_390)
			// Standard Error: 491
			.saturating_add(Weight::from_ref_time(896_320).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 727 nanoseconds.
		Weight::from_ref_time(826_352)
			// Standard Error: 565
			.saturating_add(Weight::from_ref_time(901_064).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 710 nanoseconds.
		Weight::from_ref_time(935_204)
			// Standard Error: 669
			.saturating_add(Weight::from_ref_time(1_113_934).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 707 nanoseconds.
		Weight::from_ref_time(956_969)
			// Standard Error: 875
			.saturating_add(Weight::from_ref_time(1_119_036).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 733 nanoseconds.
		Weight::from_ref_time(1_035_778)
			// Standard Error: 607
			.saturating_add(Weight::from_ref_time(1_111_742).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 727 nanoseconds.
		Weight::from_ref_time(898_424)
			// Standard Error: 900
			.saturating_add(Weight::from_ref_time(1_156_810).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 716 nanoseconds.
		Weight::from_ref_time(913_084)
			// Standard Error: 910
			.saturating_add(Weight::from_ref_time(1_155_339).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 721 nanoseconds.
		Weight::from_ref_time(996_514)
			// Standard Error: 639
			.saturating_add(Weight::from_ref_time(1_148_041).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 702 nanoseconds.
		Weight::from_ref_time(948_212)
			// Standard Error: 720
			.saturating_add(Weight::from_ref_time(1_149_724).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 685 nanoseconds.
		Weight::from_ref_time(982_842)
			// Standard Error: 784
			.saturating_add(Weight::from_ref_time(1_150_443).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 715 nanoseconds.
		Weight::from_ref_time(937_339)
			// Standard Error: 1_052
			.saturating_add(Weight::from_ref_time(1_149_216).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 700 nanoseconds.
		Weight::from_ref_time(908_463)
			// Standard Error: 831
			.saturating_add(Weight::from_ref_time(1_155_756).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 737 nanoseconds.
		Weight::from_ref_time(906_032)
			// Standard Error: 782
			.saturating_add(Weight::from_ref_time(1_130_279).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 731 nanoseconds.
		Weight::from_ref_time(962_552)
			// Standard Error: 735
			.saturating_add(Weight::from_ref_time(1_111_007).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 728 nanoseconds.
		Weight::from_ref_time(1_001_258)
			// Standard Error: 913
			.saturating_add(Weight::from_ref_time(1_129_054).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 702 nanoseconds.
		Weight::from_ref_time(840_424)
			// Standard Error: 1_212
			.saturating_add(Weight::from_ref_time(1_083_921).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 728 nanoseconds.
		Weight::from_ref_time(981_899)
			// Standard Error: 3_078
			.saturating_add(Weight::from_ref_time(1_097_152).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 704 nanoseconds.
		Weight::from_ref_time(1_398_917)
			// Standard Error: 2_164
			.saturating_add(Weight::from_ref_time(1_024_445).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 725 nanoseconds.
		Weight::from_ref_time(1_192_261)
			// Standard Error: 4_208
			.saturating_add(Weight::from_ref_time(964_230).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 714 nanoseconds.
		Weight::from_ref_time(880_994)
			// Standard Error: 876
			.saturating_add(Weight::from_ref_time(1_133_323).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 731 nanoseconds.
		Weight::from_ref_time(897_561)
			// Standard Error: 741
			.saturating_add(Weight::from_ref_time(1_130_424).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 709 nanoseconds.
		Weight::from_ref_time(822_633)
			// Standard Error: 1_111
			.saturating_add(Weight::from_ref_time(1_133_517).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 712 nanoseconds.
		Weight::from_ref_time(1_021_795)
			// Standard Error: 535
			.saturating_add(Weight::from_ref_time(1_111_539).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 695 nanoseconds.
		Weight::from_ref_time(783_262)
			// Standard Error: 1_599
			.saturating_add(Weight::from_ref_time(1_120_617).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 704 nanoseconds.
		Weight::from_ref_time(912_513)
			// Standard Error: 1_262
			.saturating_add(Weight::from_ref_time(1_127_710).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 714 nanoseconds.
		Weight::from_ref_time(833_492)
			// Standard Error: 843
			.saturating_add(Weight::from_ref_time(1_124_827).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 716 nanoseconds.
		Weight::from_ref_time(899_579)
			// Standard Error: 1_163
			.saturating_add(Weight::from_ref_time(1_132_007).saturating_mul(r.into()))
	}
}
