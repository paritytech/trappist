
//! Autogenerated weights for `pallet_asset_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-04, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bear-ThinkPad-E480`, CPU: `Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/trappist-collator
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_asset_registry
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/asset-registry/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn register_reserve_asset() -> Weight;
	fn unregister_reserve_asset() -> Weight;
}

/// Weight functions for `pallet_asset_registry`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Assets Asset (r:1 w:0)
	// Storage: AssetRegistry AssetIdMultiLocation (r:1 w:1)
	// Storage: AssetRegistry AssetMultiLocationId (r:0 w:1)
	fn register_reserve_asset() -> Weight {
		(28_599_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: AssetRegistry AssetIdMultiLocation (r:1 w:1)
	// Storage: AssetRegistry AssetMultiLocationId (r:0 w:1)
	fn unregister_reserve_asset() -> Weight {
		(23_753_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

impl WeightInfo for () {
	// Storage: Assets Asset (r:1 w:0)
	// Storage: AssetRegistry AssetIdMultiLocation (r:1 w:1)
	// Storage: AssetRegistry AssetMultiLocationId (r:0 w:1)
	fn register_reserve_asset() -> Weight {
		(28_599_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: AssetRegistry AssetIdMultiLocation (r:1 w:1)
	// Storage: AssetRegistry AssetMultiLocationId (r:0 w:1)
	fn unregister_reserve_asset() -> Weight {
		(23_753_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}
