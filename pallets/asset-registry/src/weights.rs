// This file is part of Trappist.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_asset_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `vale`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/trappist-collator
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_asset_registry
// --execution=wasm
// --wasm-execution=compiled
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/asset-registry/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn register_reserve_asset() -> Weight;
	fn unregister_reserve_asset() -> Weight;
}

/// Weight functions for `pallet_asset_registry`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Assets Asset (r:1 w:0)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: AssetRegistry AssetIdMultiLocation (r:1 w:1)
	/// Proof: AssetRegistry AssetIdMultiLocation (max_values: None, max_size: Some(622), added: 3097, mode: MaxEncodedLen)
	/// Storage: AssetRegistry AssetMultiLocationId (r:0 w:1)
	/// Proof: AssetRegistry AssetMultiLocationId (max_values: None, max_size: Some(622), added: 3097, mode: MaxEncodedLen)
	fn register_reserve_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `123`
		//  Estimated: `7762`
		// Minimum execution time: 21_998_000 picoseconds.
		Weight::from_parts(22_970_000, 0)
			.saturating_add(Weight::from_parts(0, 7762))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: AssetRegistry AssetIdMultiLocation (r:1 w:1)
	/// Proof: AssetRegistry AssetIdMultiLocation (max_values: None, max_size: Some(622), added: 3097, mode: MaxEncodedLen)
	/// Storage: AssetRegistry AssetMultiLocationId (r:0 w:1)
	/// Proof: AssetRegistry AssetMultiLocationId (max_values: None, max_size: Some(622), added: 3097, mode: MaxEncodedLen)
	fn unregister_reserve_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `107`
		//  Estimated: `4087`
		// Minimum execution time: 17_862_000 picoseconds.
		Weight::from_parts(18_454_000, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

impl WeightInfo for () {
	/// Storage: Assets Asset (r:1 w:0)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: AssetRegistry AssetIdMultiLocation (r:1 w:1)
	/// Proof: AssetRegistry AssetIdMultiLocation (max_values: None, max_size: Some(622), added: 3097, mode: MaxEncodedLen)
	/// Storage: AssetRegistry AssetMultiLocationId (r:0 w:1)
	/// Proof: AssetRegistry AssetMultiLocationId (max_values: None, max_size: Some(622), added: 3097, mode: MaxEncodedLen)
	fn register_reserve_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `123`
		//  Estimated: `7762`
		// Minimum execution time: 21_998_000 picoseconds.
		Weight::from_parts(22_970_000, 0)
			.saturating_add(Weight::from_parts(0, 7762))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: AssetRegistry AssetIdMultiLocation (r:1 w:1)
	/// Proof: AssetRegistry AssetIdMultiLocation (max_values: None, max_size: Some(622), added: 3097, mode: MaxEncodedLen)
	/// Storage: AssetRegistry AssetMultiLocationId (r:0 w:1)
	/// Proof: AssetRegistry AssetMultiLocationId (max_values: None, max_size: Some(622), added: 3097, mode: MaxEncodedLen)
	fn unregister_reserve_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `107`
		//  Estimated: `4087`
		// Minimum execution time: 17_862_000 picoseconds.
		Weight::from_parts(18_454_000, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
}